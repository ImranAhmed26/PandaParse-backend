generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  INTERNAL
  USER
}

model Company {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  users     User[]
  tokens    TokenBalance?
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  name       String
  password   String
  role       UserRole @default(USER)
  createdAt  DateTime @default(now())
  company    Company? @relation(fields: [companyId], references: [id])
  companyId  String?
  uploads    Upload[]
  jobs       Job[]
  tokens     TokenBalance?
}

model TokenBalance {
  id         String   @id @default(uuid())
  balance    Int      @default(0)
  updatedAt  DateTime @updatedAt

  // Either linked to a company or user (not both)
  company    Company? @relation(fields: [companyId], references: [id])
  companyId  String?  @unique

  user       User?    @relation(fields: [userId], references: [id])
  userId     String?  @unique

  TokenTransaction TokenTransaction[]
}

model TokenTransaction {
  id          String   @id @default(uuid())
  amount      Int
  type        TokenTransactionType
  reason      String?
  createdAt   DateTime @default(now())

  tokenBalance TokenBalance @relation(fields: [tokenBalanceId], references: [id])
  tokenBalanceId String
}

enum TokenTransactionType {
  PURCHASE
  CONSUME
  ADJUSTMENT
  REFUND
}

model Upload {
  id         String   @id @default(uuid())
  key        String   @unique       // S3 key
  fileName   String
  fileType   String
  status     UploadStatus   @default(uploaded) // or "processing", "complete"
  uploadedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  job        Job?
}

model Job {
  id            String   @id @default(uuid())
  startedAt     DateTime @default(now())
  completedAt   DateTime?
  status        JobStatus  @default(pending) // pending, processing, failed, success
  type          DocumentType
  upload        Upload   @relation(fields: [uploadId], references: [id])
  uploadId      String   @unique
  result        DocumentResult?
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  errorMessage  String?
  errorCode     String?
}

model DocumentResult {
  id        String   @id @default(uuid())
  job       Job      @relation(fields: [jobId], references: [id])
  jobId     String   @unique
  jsonUrl   String?   // S3 URL to parsed JSON
  csvUrl    String?   // S3 URL to parsed CSV
  createdAt DateTime @default(now())
  summary   Json?
  items     InvoiceItem[]
}

model InvoiceItem {
  id        String   @id @default(uuid())
  result    DocumentResult @relation(fields: [resultId], references: [id])
  resultId  String
  name      String?
  quantity  Float?
  unitPrice Float?
  total     Float?
  tax       Float?
  createdAt DateTime @default(now())
}

enum DocumentType {
  INVOICE
  RECEIPT
  BANK_STATEMENT
  PAYSLIP
  CONTRACT
  OTHER
}

enum JobStatus {
  pending
  processing
  failed
  success
}

enum UploadStatus {
  uploaded
  processing
  complete
  failed
}

