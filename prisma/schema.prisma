generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  role      Int      @default(2) // 0=ADMIN, 1=INTERNAL, 2=USER
  createdAt DateTime @default(now())

  // üîÅ Belongs to a company (if not solo)
  companyId String?
  company   Company? @relation("CompanyUsers", fields: [companyId], references: [id])

  // üîÅ Optional: owns a company
  ownedCompany Company? @relation("CompanyOwner")
  workspacesCreated Workspace[] @relation("WorkspaceCreator")

  documents Document[]
  jobs      Job[]
  tokens    TokenBalance?
  Upload    Upload[]

}

model Company {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())

  // üî• New: Owner of the company
  ownerId String @unique
  owner   User   @relation("CompanyOwner", fields: [ownerId], references: [id])

  // All users under this company (including the owner)
  users User[] @relation("CompanyUsers")

  tokens TokenBalance?
}

model Workspace {
  id         String              @id @default(uuid())
  name       String
  ownerId    String
  ownerType Int       // 0=USER, 1=COMPANY
  documents  WorkspaceDocument[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creatorId  String
  creator    User     @relation("WorkspaceCreator", fields: [creatorId], references: [id])

  @@unique([ownerId, name])
}

model WorkspaceDocument {
  document   Document @relation(fields: [documentId], references: [id])
  documentId String

  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String

  @@id([documentId, workspaceId])
}

model Document {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  upload   Upload? @relation(fields: [uploadId], references: [id])
  uploadId String? @unique

  fileName    String
  documentUrl String // S3 or external URL
  type        DocumentType
  status      DocumentStatus
  issueDate   DateTime?
  totalAmount Float?
  ocrResult   Json?

  workspace WorkspaceDocument[] // Many-to-many relation
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

model Upload {
  id         String       @id @default(uuid())
  key        String       @unique
  fileName   String
  fileType   String
  status     UploadStatus @default(uploaded)
  uploadedAt DateTime     @default(now())

  user     User      @relation(fields: [userId], references: [id])
  userId   String
  job      Job?
  document Document?
}

model Job {
  id          String       @id @default(uuid())
  startedAt   DateTime     @default(now())
  completedAt DateTime?
  status      JobStatus    @default(pending)
  type        DocumentType

  upload   Upload @relation(fields: [uploadId], references: [id])
  uploadId String @unique

  user   User   @relation(fields: [userId], references: [id])
  userId String

  result       DocumentResult?
  errorMessage String?
  errorCode    String?
}

model DocumentResult {
  id    String @id @default(uuid())
  job   Job    @relation(fields: [jobId], references: [id])
  jobId String @unique

  jsonUrl   String? // S3 URL to parsed JSON
  csvUrl    String? // S3 URL to parsed CSV
  createdAt DateTime      @default(now())
  summary   Json?
  items     InvoiceItem[]
}

model InvoiceItem {
  id       String         @id @default(uuid())
  result   DocumentResult @relation(fields: [resultId], references: [id])
  resultId String

  name      String?
  quantity  Float?
  unitPrice Float?
  total     Float?
  tax       Float?
  createdAt DateTime @default(now())
}

model TokenBalance {
  id        String   @id @default(uuid())
  balance   Int      @default(0)
  updatedAt DateTime @updatedAt

  company   Company? @relation(fields: [companyId], references: [id])
  companyId String?  @unique

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique

  TokenTransaction TokenTransaction[]
}

model TokenTransaction {
  id        String               @id @default(uuid())
  amount    Int
  type      TokenTransactionType
  reason    String?
  createdAt DateTime             @default(now())

  tokenBalance   TokenBalance @relation(fields: [tokenBalanceId], references: [id])
  tokenBalanceId String
}

// UserRole is now represented as Int: 0=ADMIN, 1=INTERNAL, 2=USER

enum DocumentType {
  INVOICE
  RECEIPT
  CREDIT_NOTE
  PURCHASE_ORDER
  BANK_STATEMENT
  PAYSLIP
  CONTRACT
  OTHER
}

enum DocumentStatus {
  UNPROCESSED
  PROCESSED
  PAID
  UNPAID
  FLAGGED
}

enum JobStatus {
  pending
  processing
  failed
  success
}

enum UploadStatus {
  uploaded
  processing
  complete
  failed
}

enum TokenTransactionType {
  PURCHASE
  CONSUME
  ADJUSTMENT
  REFUND
}

// OwnerType is now represented as Int: 0=USER, 1=COMPANY
